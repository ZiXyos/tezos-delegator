// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"delegator/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUseCase creates a new instance of MockUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUseCase {
	mock := &MockUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUseCase is an autogenerated mock type for the UseCase type
type MockUseCase struct {
	mock.Mock
}

type MockUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUseCase) EXPECT() *MockUseCase_Expecter {
	return &MockUseCase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUseCase
func (_mock *MockUseCase) Create(ctx context.Context, data []domain.TzktApiDelegationsResponse) error {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []domain.TzktApiDelegationsResponse) error); ok {
		r0 = returnFunc(ctx, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUseCase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUseCase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - data []domain.TzktApiDelegationsResponse
func (_e *MockUseCase_Expecter) Create(ctx interface{}, data interface{}) *MockUseCase_Create_Call {
	return &MockUseCase_Create_Call{Call: _e.mock.On("Create", ctx, data)}
}

func (_c *MockUseCase_Create_Call) Run(run func(ctx context.Context, data []domain.TzktApiDelegationsResponse)) *MockUseCase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []domain.TzktApiDelegationsResponse
		if args[1] != nil {
			arg1 = args[1].([]domain.TzktApiDelegationsResponse)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUseCase_Create_Call) Return(err error) *MockUseCase_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUseCase_Create_Call) RunAndReturn(run func(ctx context.Context, data []domain.TzktApiDelegationsResponse) error) *MockUseCase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetDelegations provides a mock function for the type MockUseCase
func (_mock *MockUseCase) GetDelegations(ctx context.Context) (domain.ApiResponse[domain.DelegationsResponseType], error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDelegations")
	}

	var r0 domain.ApiResponse[domain.DelegationsResponseType]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (domain.ApiResponse[domain.DelegationsResponseType], error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) domain.ApiResponse[domain.DelegationsResponseType]); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(domain.ApiResponse[domain.DelegationsResponseType])
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUseCase_GetDelegations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDelegations'
type MockUseCase_GetDelegations_Call struct {
	*mock.Call
}

// GetDelegations is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUseCase_Expecter) GetDelegations(ctx interface{}) *MockUseCase_GetDelegations_Call {
	return &MockUseCase_GetDelegations_Call{Call: _e.mock.On("GetDelegations", ctx)}
}

func (_c *MockUseCase_GetDelegations_Call) Run(run func(ctx context.Context)) *MockUseCase_GetDelegations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUseCase_GetDelegations_Call) Return(apiResponse domain.ApiResponse[domain.DelegationsResponseType], err error) *MockUseCase_GetDelegations_Call {
	_c.Call.Return(apiResponse, err)
	return _c
}

func (_c *MockUseCase_GetDelegations_Call) RunAndReturn(run func(ctx context.Context) (domain.ApiResponse[domain.DelegationsResponseType], error)) *MockUseCase_GetDelegations_Call {
	_c.Call.Return(run)
	return _c
}
