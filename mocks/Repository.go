// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"delegator/internal/models"
	"delegator/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// CountDelegations provides a mock function for the type MockRepository
func (_mock *MockRepository) CountDelegations(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountDelegations")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_CountDelegations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountDelegations'
type MockRepository_CountDelegations_Call struct {
	*mock.Call
}

// CountDelegations is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) CountDelegations(ctx interface{}) *MockRepository_CountDelegations_Call {
	return &MockRepository_CountDelegations_Call{Call: _e.mock.On("CountDelegations", ctx)}
}

func (_c *MockRepository_CountDelegations_Call) Run(run func(ctx context.Context)) *MockRepository_CountDelegations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_CountDelegations_Call) Return(n int64, err error) *MockRepository_CountDelegations_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRepository_CountDelegations_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockRepository_CountDelegations_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockRepository
func (_mock *MockRepository) Create(ctx context.Context, delegationToCreate []domain.CreateDelegationDTO) error {
	ret := _mock.Called(ctx, delegationToCreate)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []domain.CreateDelegationDTO) error); ok {
		r0 = returnFunc(ctx, delegationToCreate)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - delegationToCreate []domain.CreateDelegationDTO
func (_e *MockRepository_Expecter) Create(ctx interface{}, delegationToCreate interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", ctx, delegationToCreate)}
}

func (_c *MockRepository_Create_Call) Run(run func(ctx context.Context, delegationToCreate []domain.CreateDelegationDTO)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []domain.CreateDelegationDTO
		if args[1] != nil {
			arg1 = args[1].([]domain.CreateDelegationDTO)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(err error) *MockRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(ctx context.Context, delegationToCreate []domain.CreateDelegationDTO) error) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function for the type MockRepository
func (_mock *MockRepository) FindAll(ctx context.Context) ([]models.Delegation, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []models.Delegation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.Delegation, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.Delegation); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Delegation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) FindAll(ctx interface{}) *MockRepository_FindAll_Call {
	return &MockRepository_FindAll_Call{Call: _e.mock.On("FindAll", ctx)}
}

func (_c *MockRepository_FindAll_Call) Run(run func(ctx context.Context)) *MockRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_FindAll_Call) Return(delegations []models.Delegation, err error) *MockRepository_FindAll_Call {
	_c.Call.Return(delegations, err)
	return _c
}

func (_c *MockRepository_FindAll_Call) RunAndReturn(run func(ctx context.Context) ([]models.Delegation, error)) *MockRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindOneByID provides a mock function for the type MockRepository
func (_mock *MockRepository) FindOneByID(ctx context.Context, id domain.ID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindOneByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_FindOneByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneByID'
type MockRepository_FindOneByID_Call struct {
	*mock.Call
}

// FindOneByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.ID
func (_e *MockRepository_Expecter) FindOneByID(ctx interface{}, id interface{}) *MockRepository_FindOneByID_Call {
	return &MockRepository_FindOneByID_Call{Call: _e.mock.On("FindOneByID", ctx, id)}
}

func (_c *MockRepository_FindOneByID_Call) Run(run func(ctx context.Context, id domain.ID)) *MockRepository_FindOneByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ID
		if args[1] != nil {
			arg1 = args[1].(domain.ID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_FindOneByID_Call) Return(err error) *MockRepository_FindOneByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_FindOneByID_Call) RunAndReturn(run func(ctx context.Context, id domain.ID) error) *MockRepository_FindOneByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastProcessedLevel provides a mock function for the type MockRepository
func (_mock *MockRepository) GetLastProcessedLevel(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastProcessedLevel")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetLastProcessedLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastProcessedLevel'
type MockRepository_GetLastProcessedLevel_Call struct {
	*mock.Call
}

// GetLastProcessedLevel is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) GetLastProcessedLevel(ctx interface{}) *MockRepository_GetLastProcessedLevel_Call {
	return &MockRepository_GetLastProcessedLevel_Call{Call: _e.mock.On("GetLastProcessedLevel", ctx)}
}

func (_c *MockRepository_GetLastProcessedLevel_Call) Run(run func(ctx context.Context)) *MockRepository_GetLastProcessedLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_GetLastProcessedLevel_Call) Return(n int64, err error) *MockRepository_GetLastProcessedLevel_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRepository_GetLastProcessedLevel_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockRepository_GetLastProcessedLevel_Call {
	_c.Call.Return(run)
	return _c
}
