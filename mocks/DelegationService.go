// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"delegator/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockDelegationService creates a new instance of MockDelegationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDelegationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDelegationService {
	mock := &MockDelegationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDelegationService is an autogenerated mock type for the DelegationService type
type MockDelegationService struct {
	mock.Mock
}

type MockDelegationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDelegationService) EXPECT() *MockDelegationService_Expecter {
	return &MockDelegationService_Expecter{mock: &_m.Mock}
}

// GetDelegations provides a mock function for the type MockDelegationService
func (_mock *MockDelegationService) GetDelegations() ([]domain.TzktApiDelegationsResponse, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDelegations")
	}

	var r0 []domain.TzktApiDelegationsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]domain.TzktApiDelegationsResponse, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []domain.TzktApiDelegationsResponse); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.TzktApiDelegationsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDelegationService_GetDelegations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDelegations'
type MockDelegationService_GetDelegations_Call struct {
	*mock.Call
}

// GetDelegations is a helper method to define mock.On call
func (_e *MockDelegationService_Expecter) GetDelegations() *MockDelegationService_GetDelegations_Call {
	return &MockDelegationService_GetDelegations_Call{Call: _e.mock.On("GetDelegations")}
}

func (_c *MockDelegationService_GetDelegations_Call) Run(run func()) *MockDelegationService_GetDelegations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDelegationService_GetDelegations_Call) Return(tzktApiDelegationsResponses []domain.TzktApiDelegationsResponse, err error) *MockDelegationService_GetDelegations_Call {
	_c.Call.Return(tzktApiDelegationsResponses, err)
	return _c
}

func (_c *MockDelegationService_GetDelegations_Call) RunAndReturn(run func() ([]domain.TzktApiDelegationsResponse, error)) *MockDelegationService_GetDelegations_Call {
	_c.Call.Return(run)
	return _c
}

// GetDelegationsFromLevel provides a mock function for the type MockDelegationService
func (_mock *MockDelegationService) GetDelegationsFromLevel(lastLevel int64, limit int) ([]domain.TzktApiDelegationsResponse, error) {
	ret := _mock.Called(lastLevel, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetDelegationsFromLevel")
	}

	var r0 []domain.TzktApiDelegationsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64, int) ([]domain.TzktApiDelegationsResponse, error)); ok {
		return returnFunc(lastLevel, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(int64, int) []domain.TzktApiDelegationsResponse); ok {
		r0 = returnFunc(lastLevel, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.TzktApiDelegationsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int64, int) error); ok {
		r1 = returnFunc(lastLevel, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDelegationService_GetDelegationsFromLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDelegationsFromLevel'
type MockDelegationService_GetDelegationsFromLevel_Call struct {
	*mock.Call
}

// GetDelegationsFromLevel is a helper method to define mock.On call
//   - lastLevel int64
//   - limit int
func (_e *MockDelegationService_Expecter) GetDelegationsFromLevel(lastLevel interface{}, limit interface{}) *MockDelegationService_GetDelegationsFromLevel_Call {
	return &MockDelegationService_GetDelegationsFromLevel_Call{Call: _e.mock.On("GetDelegationsFromLevel", lastLevel, limit)}
}

func (_c *MockDelegationService_GetDelegationsFromLevel_Call) Run(run func(lastLevel int64, limit int)) *MockDelegationService_GetDelegationsFromLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDelegationService_GetDelegationsFromLevel_Call) Return(tzktApiDelegationsResponses []domain.TzktApiDelegationsResponse, err error) *MockDelegationService_GetDelegationsFromLevel_Call {
	_c.Call.Return(tzktApiDelegationsResponses, err)
	return _c
}

func (_c *MockDelegationService_GetDelegationsFromLevel_Call) RunAndReturn(run func(lastLevel int64, limit int) ([]domain.TzktApiDelegationsResponse, error)) *MockDelegationService_GetDelegationsFromLevel_Call {
	_c.Call.Return(run)
	return _c
}
